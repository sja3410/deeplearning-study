{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 테스트 세트로 모델을 튜닝합니다.\n",
    "<로지스틱 회귀로 모델 훈련하고 평가하기>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8333333333333334"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.datasets import load_breast_cancer\n",
    "from sklearn.model_selection import train_test_split\n",
    "cancer = load_breast_cancer()\n",
    "x = cancer.data\n",
    "y = cancer.target\n",
    "x_train_all, x_test, y_train_all, y_test = train_test_split(x,y, stratify = y, test_size = 0.2, random_state = 42)\n",
    "\n",
    "from sklearn.linear_model import SGDClassifier\n",
    "sgd = SGDClassifier(loss = 'log', random_state = 42)\n",
    "sgd.fit(x_train_all, y_train_all)\n",
    "sgd.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "loss는 매개변수를 사용자가 직접 선택하며 사용하여 성능에 좌우할 수 있는 '하이퍼파라미터'라고 한다. \n",
    "\n",
    "<서포트 벡터 머신으로 모델 훈련하고 평가하기>\n",
    "loss의 값을 log에서 hinge로 바꾸면 '선형 서포트 벡터 머신(SVM)문제를 푸는 모델이 만들어 진다.' \n",
    "SVM이란 훈련데이터의 클래스를 구분하는 경계선을 찾는 작업이다. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9385964912280702"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sgd = SGDClassifier(loss='hinge', random_state =42)\n",
    "sgd.fit(x_train_all, y_train_all)\n",
    "sgd.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "loss의 매개변수를 log에서 hinge로 바꾸니 성능평가가 증가하였다! --> '모델을 튜닝한다.'\n",
    "\n",
    "#테스트 세트로 모델을 튜닝하면 실전에서 좋은 성능을 기대하기가 어렵다.\n",
    "테스트 세트는 실전에 투입된 모델의 성능을 측정하기 위해 사용한다. 하지만, 테스트 세트에 대해서만 좋은 성능을 보여준다.\n",
    "--> 이런현상을 '테스트 세트의 정보가 모델에 새어 나갔다.'라고한다.\n",
    "\n",
    "#검증 세트를 준비한다.\n",
    "테스트 세트는 모델 튜닝을 모두 마치고 실전에 투입하기 전에 딱 한 번만 사용하는 것이 좋다. 즉, 이것을\n",
    "'검증 세트'라고 하며 훈련 세트를 조금씩 떼어 만든다. \n",
    "예를 들어 훈련세트가 80, 테스트 세트가 20이었다면, \n",
    "훈련세트 60, 테스트 세트 20, 검증 세트 20으로 배정한다. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "364 91\n"
     ]
    }
   ],
   "source": [
    "#검증 세트 분할하기 6:2:2\n",
    "# 처음부터 전체 데이터 세트를 6:2:2로 나누는 것이 아니라 8:2로 나누어 훈련 세트와 테스트 세트를 만들고, \n",
    "# 다시 훈련 세트를 8:2로 나누어 훈련세트와 검증 세트를 만든다. \n",
    "\n",
    "x_train, x_val, y_train, y_val = train_test_split(x_train_all, y_train_all, stratify = y_train_all, test_size = 0.2, random_state=42)\n",
    "print(len(x_train), len(x_val))\n",
    "#검증세트는 91, 훈련 세트는 364로 2:8이 된것을 확인할 수 있다. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6923076923076923"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#검증 세트 사용해 모델 평가하기 \n",
    "sgd = SGDClassifier(loss ='log', random_state = 42)\n",
    "sgd.fit(x_train, y_train)\n",
    "sgd.score(x_val, y_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "앞에 실습에서 나온 정확도 보다 낮다는 것을 확인\n",
    "데이터의 양이 너무 적은 경우에는 매개변수의 값을 조금만 조절해도 성능 평가의 차이가 심해진다.\n",
    "데이터의 양이 너무 적은 경우에는 검증 세트를 나누지 않고, 교차 검증이라는 방법을 사용한다.\n",
    "만약 데이터의 양이 방대하다면, 훈련세트에 많은 데이터 비중을 두어야 성능이 좋아진다. \n",
    "\n",
    "#데이터 전처리와 특성의 스케일을 알아봅니다.\n",
    "\n",
    "<특성의 스케일은 알고리즘에 영향을 준다.>\n",
    "\n",
    "-사이킷런이 아닌 실전으로 다루는 데이터들은 누락된 결과 값이 있을 수도 있고, 데이터의 형태가 고르지 않을 수도 있음 \n",
    "이럴때 사용하는 것이 '데이터 전처리'이다.\n",
    "-또한 잘 정리된 데이터라도 특성값의 차이가 크면 (특성의 스케일이 다른 경우) 전처리를 진행해야 한다. 이 것을 '스케일을 조정한다'라고 한다.\n",
    "\n",
    "#스케일을 조정하지 않고 모델을 훈련하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['mean perimeter' 'mean area']\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "print(cancer.feature_names[[2,3]])\n",
    "plt.boxplot(x_train[:,2:4])\n",
    "plt.xlabel('feature')\n",
    "plt.ylabel('value')\n",
    "plt.show()\n",
    "#유방암 데이터 특성중에 편차가 작은 mean perimeter과 특성 편차가 큰 mean area특성을 가지고온다. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\dkstj\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\ipykernel_launcher.py:17: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9120879120879121"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "class SingleLayer:\n",
    "    def __init__(self, learning_rate= 0.1):\n",
    "        self.w = None\n",
    "        self.b = None\n",
    "        self.losses = []\n",
    "        self.w_history = [] #중치의 변화를 관찰 할 때 사용하기 위한 배열\n",
    "        self.lr = learning_rate #학습률 파라미터 \n",
    "    def forpass(self, x):\n",
    "        z = np.sum(x*self.w)+self.b\n",
    "        return z #직선 방정식을 계산한다. \n",
    "    def backprop(self, x, err):\n",
    "        w_grad = x*err\n",
    "        b_grad = 1 *err\n",
    "        return w_grad, b_grad #가중치와 절편의 그레디언트를 계산한다.\n",
    "    def activation(self, z):\n",
    "        a= 1/(1+np.exp(-z)) #시그모이드 계산\n",
    "        return a\n",
    "    def fit(self, x, y, epochs = 100):\n",
    "        self.w = np.ones(x.shape[1]) #가중치를 모든 특성에 대해서 1로 초기화\n",
    "        self.b = 0 #절편을 0으로 초기화\n",
    "        self.w_history.append(self.w.copy()) #가중치를 기록한다. \n",
    "        np.random.seed(42) #무작위로 시드를 지정한다.\n",
    "        for i in range(epochs): #100에포크\n",
    "            loss = 0\n",
    "            indexes = np.random.permutation(np.arange(len(x))) #인덱스를 마구 섞는다.\n",
    "            for i in indexes:\n",
    "                z = self.forpass(x[i]) #정방향 계산\n",
    "                a = self.activation(z) #활성화 함수\n",
    "                err = -(y[i] -a) #오차 계산\n",
    "                w_grad, b_grad = self.backprop(x[i], err)#역방향 계산\n",
    "                self.w -= self.lr * w_grad #가중치 업데이트 (학습률 적용)\n",
    "                self.b -= b_grad #절편 업데이트\n",
    "                \n",
    "                self.w_history.append(self.w.copy())#가중치 기록\n",
    "                a = np.clip(a, 1e-10, 1-1e-10)#안전한 로그 계산을 위해 클리핑한 후 손실을 누적\n",
    "                loss += -(y[i]*np.log(a)+(1-y[i])*np.log(1-a)) #손실 누적\n",
    "            self.losses.append(loss/len(y)) # 평균 손실을 저장한다. \n",
    "    def predict(self, x):\n",
    "        z = [self.forpass(x_i) for x_i in x]\n",
    "        return np.array(z)>0\n",
    "    \n",
    "    def score(self, x, y):\n",
    "        return np.mean(self.predict(x) == y)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "학습률 : 가중치의 업데이트 양을 조절한다. \n",
    "-손실 함수는 복잡한 굴곡을 가지는 다차원의 초평면이다.\n",
    "-만약 가중치를 큰 폭으로 업데이트 하면 전역 최솟값을 그냥 지나쳐 버릴 수 있어 최적의 해를 구할 수 없다. \n",
    "-따라서 전역 최솟값을 놓치지 않도록 가중치의 업데이트 양을 조절할 필요가 있다. \n",
    "\n",
    "<모델 훈련하고 평가하기>\n",
    "1. 스케일을 조정하지 않은 훈련 세트를 사용하여 모델을 훈련"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\dkstj\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\ipykernel_launcher.py:17: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9120879120879121"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "layer1 =SingleLayer()\n",
    "layer1.fit(x_train, y_train)\n",
    "layer1.score(x_val, y_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#layer1 객체의 인스턴스 변수 w_history에는 100에포크 동안 변경된 가중치가 기록되어 있다. w[2]는 mean perimeter, w[3]은 maen \n",
    "#area특성에 대한 가중치이다.\n",
    "w2 = []\n",
    "w3 = []\n",
    "for w in layer1.w_history:\n",
    "    w2.append(w[2])\n",
    "    w3.append(w[3])\n",
    "plt.plot(w2, w3)\n",
    "plt.plot(w2[-1], w3[-1], 'ro')\n",
    "plt.xlabel('w[2]')\n",
    "plt.ylabel('w[3]')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "특성 스케일이 적은 mean perimeter에 비해 mean area의 학습과정에서 큰 폭으로 흔들리며 변화하고 있다.\n",
    "--> w3에 대한 그레디언트가 크기 때문에 w3축을 따라 가중치가 크게 요동치고 있다. 라고 한다. \n",
    "\n",
    "#스케일을 조정해 모델을 훈련한다.\n",
    "\n",
    "스케일을 조정하는 방법 --> '표준화'\n",
    "표준화 공식 : 특성값에서 평균을 빼고, 표준편차로 나누면 된다.\n",
    "z = (x-u)/s\n",
    "표준화는 보통 StandardScalar 클래스에 준비되어 있다. \n",
    "\n",
    "<넘파이로 표준화 구현하기>\n",
    "-mean()과 std()함수의 axis 매개변수를 0으로 지정하면 2차원 배열의 열을 기준으로 통계치를 계산하여 하나의 행 벡터로 반환해 준다. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.21529445 -0.3313719   0.17983103 ... -0.48870759  1.0446075\n",
      "  -0.6393202 ]\n",
      " [-0.6557398  -1.14919128 -0.71043609 ... -0.49139007  0.27379602\n",
      "  -0.9632616 ]\n",
      " [ 0.18967579  0.55160342  0.16625487 ...  1.00632788  1.19598931\n",
      "   1.3439391 ]\n",
      " ...\n",
      " [ 0.11281983 -0.88856752  0.10125385 ...  0.65611522 -0.35953605\n",
      "  -0.42335927]\n",
      " [ 0.96108195  1.44356576  0.94585569 ... -0.08901809 -2.0401831\n",
      "  -0.8927216 ]\n",
      " [-0.74398184 -0.41000838 -0.73429722 ... -0.77275241 -0.52482027\n",
      "  -0.19925911]]\n"
     ]
    }
   ],
   "source": [
    "train_mean = np.mean(x_train, axis = 0) #평균 구하기 \n",
    "train_std = np.std(x_train, axis = 0)#표준편차 구하기 \n",
    "x_train_scaled = (x_train - train_mean) / train_std"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<모델 훈련하기>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "0.37362637362637363"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "layer2 = SingleLayer()\n",
    "layer2.fit(x_train_scaled, y_train) #표준화로 훈련\n",
    "w2 = []\n",
    "w3 = []\n",
    "for w in layer2.w_history:\n",
    "    w2.append(w[2])\n",
    "    w3.append(w[3])\n",
    "plt.plot(w2,w3)\n",
    "plt.plot(w2[-1], w3[-1], 'ro')\n",
    "plt.xlabel('w[2]')\n",
    "plt.ylabel('w[3]')\n",
    "plt.show()\n",
    "\n",
    "layer2.score(x_val, y_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-w2와 w3의 변화 비율이 비슷하기 때문에 대각선 방향으로 가중치가 이동되었다. \n",
    "-또한 두 특성의 스케일이 비슷하기 때문에 최적값에 빠르게 근접하고 있음을 알 수 있다.\n",
    "-하지만 검증 세트의 스케일을 바꾸지 않았기 때문에 성능이 좋지 않게 나온다. \n",
    "-검증세트도 전처리가 필요하다. \n",
    "\n",
    "<검증 세트도 표준화 전처리 하기>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.967032967032967"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "val_mean = np.mean(x_val, axis = 0)\n",
    "val_std = np.std(x_val, axis = 0)\n",
    "x_val_scaled = (x_val -val_mean)/val_std\n",
    "layer2.score(x_val_scaled, y_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<원본 훈련 세트와 검증 세트로 산점도 그리기>\n",
    "파란점이 훈련 세트이고 빨간 점이 검증 세트이다. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x_train[:50, 0], x_train[:50, 1], 'bo')\n",
    "plt.plot(x_val[:50, 0], x_val[:50, 1], 'ro')\n",
    "plt.xlabel('fature 1')\n",
    "plt.ylabel('fature 2')\n",
    "plt.legend(['train set', 'val. set'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<전처리한 훈련 세트와 검증 세트로 산점도 그리기>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x_train_scaled[:50, 0], x_train_scaled[:50, 1], 'bo')\n",
    "plt.plot(x_val_scaled[:50, 0], x_val_scaled[:50, 1], 'ro')\n",
    "plt.xlabel('fature 1')\n",
    "plt.ylabel('fature 2')\n",
    "plt.legend(['train set', 'val. set'])\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-훈련 세트와 검증 세트가 조금 변화가 있다.\n",
    "-데이터를 제대로 전처리 했다면 훈련 세트와 검증 세터의 거리가 그대로 유지되어야만 한다.\n",
    "-점과 점 사이의 거리가 달라진 이유는 훈련 세트와 검증 세트를 각각 다른 비율로 전처리 했기 때문\n",
    "\n",
    "<올바르게 검증 세트 전처리하기>\n",
    "-->훈련 세트의 평균, 표준 편차를 사용하여 검증 세트를 변환한다. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "0.967032967032967"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_val_scaled = (x_val - train_mean)/train_std #훈련 데이터로 스케일 변환\n",
    "plt.plot(x_train_scaled[:50, 0], x_train_scaled[:50, 1], 'bo')\n",
    "plt.plot(x_val_scaled[:50, 0], x_val_scaled[:50, 1], 'ro')\n",
    "plt.xlabel('fature 1')\n",
    "plt.ylabel('fature 2')\n",
    "plt.legend(['train set', 'val. set'])\n",
    "plt.show()\n",
    "\n",
    "layer2.score(x_val_scaled, y_val)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
